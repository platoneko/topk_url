#ifndef SPLITTER_H
#define SPLITTER_H

#include <string>
#include <vector>
#include <fstream>
#include <iostream>


// `Splitter` splits a very large file into a specified number of parts.
// `Splitter` will read every entry in the input file, hash it and take
// the modulus to determine which temporary file to write to.
class Splitter {
private:
    // How many temporary files `Splitter` will split the input file into.
    const size_t numFiles;

    // Prefix of temporary files. Generated temporary files will be named
    // in PREFIX + "_" + NUMBER(NUMBER range is 0 to `numFiles`).
    const std::string prefix;

    // The path of the file to be splitted.
    const std::string inputFile;

    // How many times `Splitter` should hash each entry in the input file.
    // If `level` is 0, we only hash once. If `level` > 0, We will hash 
    // again on the last hash result. This will be useful when we need to 
    // split a 'large' temporary file generated by another `Splitter`.
    const int level;
public:
    Splitter(size_t numFiles_, const std::string& prefix_, 
        const std::string& inputFile_, int level_=0) :
        numFiles(numFiles_),
        prefix(prefix_),
        inputFile(inputFile_),
        level(level_) {}
    
    // Invoke this function to split on `inputFile`.
    // Return 0 if splitted successfully, or -1 if an error occurred.
    int split();
};

#endif  // ~SPLITTER_H