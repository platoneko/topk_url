#ifndef TOPK_COUNTER_H
#define TOPK_COUNTER_H

#include <string>
#include <fstream>
#include <unordered_map>
#include <vector>
#include <memory>
#include <algorithm>
#include <malloc.h>
#include <sys/stat.h>

#include "splitter.h"


// `TopkCounter` counts and calculates the topk most frequently occurring strings
// in input files. Input files are temporary files generated by `Splitter`.
// We use a hash map for each input file to count strings' frequency, and use a global
// minimum heap to maintain topk strings. When the hash map is too large at runtime, 
// `TopkCounter` will drop the hash map, create a `Splitter` to split the file again, 
// and then process the splitted subfiles.
class TopkCounter {
    typedef std::pair<std::string, size_t> StrCount;
    struct StrCountGreater {
        bool operator()(std::shared_ptr<StrCount> a, std::shared_ptr<StrCount> b) {
            return a->second > b->second;
        }
    };
private:
    // Top K.
    const size_t K;

    // Number of input temporary files.
    const size_t numFiles;

    // The maximum number of elements in the hash map at runtime. 
    // Used to control memory.
    const size_t maxHashmap;

    // Prefix of input temporary files, it specifies which files need to be processed.
    const std::string prefix;

    // File size set according to available memory. We use this value to determine 
    // how many parts we should split the `large` input temporary file into, when the
    // hash map for this file is too large.
    const size_t fileSize;

    // Minimum heap for maintaining topk strings.
    std::vector<std::shared_ptr<StrCount>> min_heap;

    // Process an input temporary file. `level` is used to create a `Splitter` when we 
    // need to split an input temporary file to avoid running out of memory. We can 
    // understand it as the splitted level of a temporary file. For more detail, see 
    // `Splitter::level` in "splitter.h".
    void process_subfile(const std::string& filename, int level=0);

    // Split an input temporary file and process its splitted files one by one.
    void split_and_process(const std::string& filename, int level);
public:
    TopkCounter(size_t K_, size_t numFiles_, size_t maxHashmap_, 
        const std::string& prefix_, size_t fileSize_) : 
        K(K_),
        numFiles(numFiles_),
        maxHashmap(maxHashmap_),
        prefix(prefix_),
        fileSize(fileSize_) {}
    
    std::vector<std::shared_ptr<StrCount>> get_topk();
};

#endif  // ~TOPK_COUNTER_H